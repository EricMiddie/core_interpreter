Description:

This is an Object Oriented implementation of the Core interpreter. Each piece of the BNF is broken down into a class containing a Parse, Print, and Execute function.
These functions are recursively called based on the Core BNF. There is an Interpreter class that wraps the main function just to keep main clean.
When execution starts, the program is tokenized using the tokenizer and parsed. If there is a violation of the BNF, the parser will catch this, print what is expected
and terminate the execution of the interpreter. The program is then pretty printed to the console and executed. Run Time errors are caught and printed, also terminating
the program. These errors include variables being undefined as well as if there aren't any more datapoints in the datastream to assign to variables. However, undefined
variables are allowed to be printed to the console. They just cannot be used in mathematical operations or conditions.

User Manual: 

To run the interpreter, put the file that you would like to run and the data you want the file to use into the folder containing interpreter.py. Then run the
command given in the readme with your file name and data file name.

Make sure that your data is 1 integer per line

Testing: 

There are no known bugs to my knowledge. I have run all 3 test programs provided as well as writted some of my own testing the following
- Undefined variable within conditions
- Multi operation conditions &&, ||, multiple && and ||
- If statements
- While statements
- Short circuiting on AND and Or
- Short circuiting with an undefined variable in the short circuited section (allowing it to run)
- Valid tokens but errant syntax.
- Trying to execute without enough data
- Read statement within loop
- Variable assignment to another variable
